using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace BookWebApp.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "authors");

            migrationBuilder.CreateTable(
                name: "Authors",
                schema: "authors",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Authors", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Publishers",
                schema: "authors",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Publishers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Books",
                schema: "authors",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Title = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ImageUrl = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    AuthorId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Books", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Books_Authors_AuthorId",
                        column: x => x.AuthorId,
                        principalSchema: "authors",
                        principalTable: "Authors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "PublishersAuthors",
                schema: "authors",
                columns: table => new
                {
                    AuthorId = table.Column<int>(type: "int", nullable: false),
                    PublisherId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PublishersAuthors", x => new { x.AuthorId, x.PublisherId });
                    table.ForeignKey(
                        name: "FK_PublishersAuthors_Authors_AuthorId",
                        column: x => x.AuthorId,
                        principalSchema: "authors",
                        principalTable: "Authors",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_PublishersAuthors_Publishers_PublisherId",
                        column: x => x.PublisherId,
                        principalSchema: "authors",
                        principalTable: "Publishers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "BookDetails",
                schema: "authors",
                columns: table => new
                {
                    BookId = table.Column<int>(type: "int", nullable: false),
                    Rank = table.Column<double>(type: "float", nullable: false),
                    Status = table.Column<int>(type: "int", nullable: false),
                    PaperbackCost = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    HardcoverCost = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Year = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Editor = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Illustrator = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PageCount = table.Column<int>(type: "int", nullable: false),
                    Language = table.Column<int>(type: "int", nullable: false),
                    ReadingAge = table.Column<byte>(type: "tinyint", nullable: false),
                    Genre = table.Column<int>(type: "int", nullable: false),
                    Reviews = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_BookDetails", x => x.BookId);
                    table.ForeignKey(
                        name: "FK_BookDetails_Books_BookId",
                        column: x => x.BookId,
                        principalSchema: "authors",
                        principalTable: "Books",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                schema: "authors",
                table: "Authors",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "Автор 1" },
                    { 2, "Автор 2" },
                    { 3, "Автор 3" },
                    { 4, "Автор 4" },
                    { 5, "Автор 5" },
                    { 6, "Автор 6" },
                    { 7, "Автор 7" },
                    { 8, "Автор 8" },
                    { 9, "Автор 9" },
                    { 10, "Автор 10" },
                    { 11, "Автор 11" },
                    { 12, "Автор 12" },
                    { 13, "Автор 13" },
                    { 14, "Автор 14" },
                    { 15, "Автор 15" },
                    { 16, "Автор 16" },
                    { 17, "Автор 17" },
                    { 18, "Автор 18" },
                    { 19, "Автор 19" },
                    { 20, "Автор 20" },
                    { 21, "Автор 21" },
                    { 22, "Автор 22" },
                    { 23, "Автор 23" },
                    { 24, "Автор 24" },
                    { 25, "Автор 25" },
                    { 26, "Автор 26" },
                    { 27, "Автор 27" },
                    { 28, "Автор 28" },
                    { 29, "Автор 29" },
                    { 30, "Автор 30" },
                    { 31, "Автор 31" },
                    { 32, "Автор 32" },
                    { 33, "Автор 33" },
                    { 34, "Автор 34" },
                    { 35, "Автор 35" },
                    { 36, "Автор 36" },
                    { 37, "Автор 37" },
                    { 38, "Автор 38" },
                    { 39, "Автор 39" },
                    { 40, "Автор 40" },
                    { 41, "Автор 41" },
                    { 42, "Автор 42" },
                    { 43, "Автор 43" },
                    { 44, "Автор 44" },
                    { 45, "Автор 45" },
                    { 46, "Автор 46" },
                    { 47, "Автор 47" },
                    { 48, "Автор 48" },
                    { 49, "Автор 49" },
                    { 50, "Автор 50" },
                    { 51, "Автор 51" },
                    { 52, "Автор 52" },
                    { 53, "Автор 53" },
                    { 54, "Автор 54" },
                    { 55, "Автор 55" },
                    { 56, "Автор 56" },
                    { 57, "Автор 57" },
                    { 58, "Автор 58" },
                    { 59, "Автор 59" },
                    { 60, "Автор 60" },
                    { 61, "Автор 61" },
                    { 62, "Автор 62" },
                    { 63, "Автор 63" },
                    { 64, "Автор 64" },
                    { 65, "Автор 65" },
                    { 66, "Автор 66" },
                    { 67, "Автор 67" },
                    { 68, "Автор 68" },
                    { 69, "Автор 69" },
                    { 70, "Автор 70" },
                    { 71, "Автор 71" },
                    { 72, "Автор 72" },
                    { 73, "Автор 73" },
                    { 74, "Автор 74" },
                    { 75, "Автор 75" },
                    { 76, "Автор 76" },
                    { 77, "Автор 77" },
                    { 78, "Автор 78" },
                    { 79, "Автор 79" },
                    { 80, "Автор 80" },
                    { 81, "Автор 81" },
                    { 82, "Автор 82" },
                    { 83, "Автор 83" },
                    { 84, "Автор 84" },
                    { 85, "Автор 85" },
                    { 86, "Автор 86" },
                    { 87, "Автор 87" },
                    { 88, "Автор 88" },
                    { 89, "Автор 89" },
                    { 90, "Автор 90" },
                    { 91, "Автор 91" },
                    { 92, "Автор 92" },
                    { 93, "Автор 93" },
                    { 94, "Автор 94" },
                    { 95, "Автор 95" },
                    { 96, "Автор 96" },
                    { 97, "Автор 97" },
                    { 98, "Автор 98" },
                    { 99, "Автор 99" },
                    { 100, "Автор 100" },
                    { 101, "Автор 101" },
                    { 102, "Автор 102" },
                    { 103, "Автор 103" },
                    { 104, "Автор 104" },
                    { 105, "Автор 105" },
                    { 106, "Автор 106" },
                    { 107, "Автор 107" },
                    { 108, "Автор 108" },
                    { 109, "Автор 109" },
                    { 110, "Автор 110" },
                    { 111, "Автор 111" },
                    { 112, "Автор 112" },
                    { 113, "Автор 113" },
                    { 114, "Автор 114" },
                    { 115, "Автор 115" },
                    { 116, "Автор 116" },
                    { 117, "Автор 117" },
                    { 118, "Автор 118" },
                    { 119, "Автор 119" },
                    { 120, "Автор 120" },
                    { 121, "Автор 121" },
                    { 122, "Автор 122" },
                    { 123, "Автор 123" },
                    { 124, "Автор 124" },
                    { 125, "Автор 125" },
                    { 126, "Автор 126" },
                    { 127, "Автор 127" },
                    { 128, "Автор 128" },
                    { 129, "Автор 129" },
                    { 130, "Автор 130" },
                    { 131, "Автор 131" },
                    { 132, "Автор 132" },
                    { 133, "Автор 133" },
                    { 134, "Автор 134" },
                    { 135, "Автор 135" },
                    { 136, "Автор 136" },
                    { 137, "Автор 137" },
                    { 138, "Автор 138" },
                    { 139, "Автор 139" },
                    { 140, "Автор 140" },
                    { 141, "Автор 141" },
                    { 142, "Автор 142" },
                    { 143, "Автор 143" },
                    { 144, "Автор 144" },
                    { 145, "Автор 145" },
                    { 146, "Автор 146" },
                    { 147, "Автор 147" },
                    { 148, "Автор 148" },
                    { 149, "Автор 149" },
                    { 150, "Автор 150" },
                    { 151, "Автор 151" },
                    { 152, "Автор 152" },
                    { 153, "Автор 153" },
                    { 154, "Автор 154" },
                    { 155, "Автор 155" },
                    { 156, "Автор 156" },
                    { 157, "Автор 157" },
                    { 158, "Автор 158" },
                    { 159, "Автор 159" },
                    { 160, "Автор 160" },
                    { 161, "Автор 161" },
                    { 162, "Автор 162" },
                    { 163, "Автор 163" },
                    { 164, "Автор 164" },
                    { 165, "Автор 165" },
                    { 166, "Автор 166" },
                    { 167, "Автор 167" },
                    { 168, "Автор 168" },
                    { 169, "Автор 169" },
                    { 170, "Автор 170" },
                    { 171, "Автор 171" },
                    { 172, "Автор 172" },
                    { 173, "Автор 173" },
                    { 174, "Автор 174" },
                    { 175, "Автор 175" },
                    { 176, "Автор 176" },
                    { 177, "Автор 177" },
                    { 178, "Автор 178" },
                    { 179, "Автор 179" },
                    { 180, "Автор 180" },
                    { 181, "Автор 181" },
                    { 182, "Автор 182" },
                    { 183, "Автор 183" },
                    { 184, "Автор 184" },
                    { 185, "Автор 185" },
                    { 186, "Автор 186" },
                    { 187, "Автор 187" },
                    { 188, "Автор 188" },
                    { 189, "Автор 189" },
                    { 190, "Автор 190" },
                    { 191, "Автор 191" },
                    { 192, "Автор 192" },
                    { 193, "Автор 193" },
                    { 194, "Автор 194" },
                    { 195, "Автор 195" },
                    { 196, "Автор 196" },
                    { 197, "Автор 197" },
                    { 198, "Автор 198" },
                    { 199, "Автор 199" },
                    { 200, "Автор 200" },
                    { 201, "Автор 201" },
                    { 202, "Автор 202" },
                    { 203, "Автор 203" },
                    { 204, "Автор 204" },
                    { 205, "Автор 205" },
                    { 206, "Автор 206" },
                    { 207, "Автор 207" },
                    { 208, "Автор 208" },
                    { 209, "Автор 209" },
                    { 210, "Автор 210" },
                    { 211, "Автор 211" },
                    { 212, "Автор 212" },
                    { 213, "Автор 213" },
                    { 214, "Автор 214" },
                    { 215, "Автор 215" },
                    { 216, "Автор 216" },
                    { 217, "Автор 217" },
                    { 218, "Автор 218" },
                    { 219, "Автор 219" },
                    { 220, "Автор 220" },
                    { 221, "Автор 221" },
                    { 222, "Автор 222" },
                    { 223, "Автор 223" },
                    { 224, "Автор 224" },
                    { 225, "Автор 225" },
                    { 226, "Автор 226" },
                    { 227, "Автор 227" },
                    { 228, "Автор 228" },
                    { 229, "Автор 229" },
                    { 230, "Автор 230" },
                    { 231, "Автор 231" },
                    { 232, "Автор 232" },
                    { 233, "Автор 233" },
                    { 234, "Автор 234" },
                    { 235, "Автор 235" },
                    { 236, "Автор 236" },
                    { 237, "Автор 237" },
                    { 238, "Автор 238" },
                    { 239, "Автор 239" },
                    { 240, "Автор 240" },
                    { 241, "Автор 241" },
                    { 242, "Автор 242" },
                    { 243, "Автор 243" },
                    { 244, "Автор 244" },
                    { 245, "Автор 245" },
                    { 246, "Автор 246" },
                    { 247, "Автор 247" },
                    { 248, "Автор 248" },
                    { 249, "Автор 249" },
                    { 250, "Автор 250" },
                    { 251, "Автор 251" },
                    { 252, "Автор 252" },
                    { 253, "Автор 253" },
                    { 254, "Автор 254" },
                    { 255, "Автор 255" },
                    { 256, "Автор 256" },
                    { 257, "Автор 257" },
                    { 258, "Автор 258" },
                    { 259, "Автор 259" },
                    { 260, "Автор 260" },
                    { 261, "Автор 261" },
                    { 262, "Автор 262" },
                    { 263, "Автор 263" },
                    { 264, "Автор 264" },
                    { 265, "Автор 265" },
                    { 266, "Автор 266" },
                    { 267, "Автор 267" },
                    { 268, "Автор 268" },
                    { 269, "Автор 269" },
                    { 270, "Автор 270" },
                    { 271, "Автор 271" },
                    { 272, "Автор 272" },
                    { 273, "Автор 273" },
                    { 274, "Автор 274" },
                    { 275, "Автор 275" },
                    { 276, "Автор 276" },
                    { 277, "Автор 277" },
                    { 278, "Автор 278" },
                    { 279, "Автор 279" },
                    { 280, "Автор 280" },
                    { 281, "Автор 281" },
                    { 282, "Автор 282" },
                    { 283, "Автор 283" },
                    { 284, "Автор 284" },
                    { 285, "Автор 285" },
                    { 286, "Автор 286" },
                    { 287, "Автор 287" },
                    { 288, "Автор 288" },
                    { 289, "Автор 289" },
                    { 290, "Автор 290" },
                    { 291, "Автор 291" },
                    { 292, "Автор 292" },
                    { 293, "Автор 293" },
                    { 294, "Автор 294" },
                    { 295, "Автор 295" },
                    { 296, "Автор 296" },
                    { 297, "Автор 297" },
                    { 298, "Автор 298" },
                    { 299, "Автор 299" },
                    { 300, "Автор 300" },
                    { 301, "Автор 301" },
                    { 302, "Автор 302" },
                    { 303, "Автор 303" },
                    { 304, "Автор 304" },
                    { 305, "Автор 305" },
                    { 306, "Автор 306" },
                    { 307, "Автор 307" },
                    { 308, "Автор 308" },
                    { 309, "Автор 309" },
                    { 310, "Автор 310" },
                    { 311, "Автор 311" },
                    { 312, "Автор 312" },
                    { 313, "Автор 313" },
                    { 314, "Автор 314" },
                    { 315, "Автор 315" },
                    { 316, "Автор 316" },
                    { 317, "Автор 317" },
                    { 318, "Автор 318" },
                    { 319, "Автор 319" },
                    { 320, "Автор 320" },
                    { 321, "Автор 321" },
                    { 322, "Автор 322" },
                    { 323, "Автор 323" },
                    { 324, "Автор 324" },
                    { 325, "Автор 325" },
                    { 326, "Автор 326" },
                    { 327, "Автор 327" },
                    { 328, "Автор 328" },
                    { 329, "Автор 329" },
                    { 330, "Автор 330" },
                    { 331, "Автор 331" },
                    { 332, "Автор 332" },
                    { 333, "Автор 333" },
                    { 334, "Автор 334" },
                    { 335, "Автор 335" },
                    { 336, "Автор 336" },
                    { 337, "Автор 337" },
                    { 338, "Автор 338" },
                    { 339, "Автор 339" },
                    { 340, "Автор 340" },
                    { 341, "Автор 341" },
                    { 342, "Автор 342" },
                    { 343, "Автор 343" },
                    { 344, "Автор 344" },
                    { 345, "Автор 345" },
                    { 346, "Автор 346" },
                    { 347, "Автор 347" },
                    { 348, "Автор 348" },
                    { 349, "Автор 349" },
                    { 350, "Автор 350" },
                    { 351, "Автор 351" },
                    { 352, "Автор 352" },
                    { 353, "Автор 353" },
                    { 354, "Автор 354" },
                    { 355, "Автор 355" },
                    { 356, "Автор 356" },
                    { 357, "Автор 357" },
                    { 358, "Автор 358" },
                    { 359, "Автор 359" },
                    { 360, "Автор 360" },
                    { 361, "Автор 361" },
                    { 362, "Автор 362" },
                    { 363, "Автор 363" },
                    { 364, "Автор 364" },
                    { 365, "Автор 365" },
                    { 366, "Автор 366" },
                    { 367, "Автор 367" },
                    { 368, "Автор 368" },
                    { 369, "Автор 369" },
                    { 370, "Автор 370" },
                    { 371, "Автор 371" },
                    { 372, "Автор 372" },
                    { 373, "Автор 373" },
                    { 374, "Автор 374" },
                    { 375, "Автор 375" },
                    { 376, "Автор 376" },
                    { 377, "Автор 377" },
                    { 378, "Автор 378" },
                    { 379, "Автор 379" },
                    { 380, "Автор 380" },
                    { 381, "Автор 381" },
                    { 382, "Автор 382" },
                    { 383, "Автор 383" },
                    { 384, "Автор 384" },
                    { 385, "Автор 385" },
                    { 386, "Автор 386" },
                    { 387, "Автор 387" },
                    { 388, "Автор 388" },
                    { 389, "Автор 389" },
                    { 390, "Автор 390" },
                    { 391, "Автор 391" },
                    { 392, "Автор 392" },
                    { 393, "Автор 393" },
                    { 394, "Автор 394" },
                    { 395, "Автор 395" },
                    { 396, "Автор 396" },
                    { 397, "Автор 397" },
                    { 398, "Автор 398" },
                    { 399, "Автор 399" },
                    { 400, "Автор 400" },
                    { 401, "Автор 401" },
                    { 402, "Автор 402" },
                    { 403, "Автор 403" },
                    { 404, "Автор 404" },
                    { 405, "Автор 405" },
                    { 406, "Автор 406" },
                    { 407, "Автор 407" },
                    { 408, "Автор 408" },
                    { 409, "Автор 409" },
                    { 410, "Автор 410" },
                    { 411, "Автор 411" },
                    { 412, "Автор 412" },
                    { 413, "Автор 413" },
                    { 414, "Автор 414" },
                    { 415, "Автор 415" },
                    { 416, "Автор 416" },
                    { 417, "Автор 417" },
                    { 418, "Автор 418" },
                    { 419, "Автор 419" },
                    { 420, "Автор 420" },
                    { 421, "Автор 421" },
                    { 422, "Автор 422" },
                    { 423, "Автор 423" },
                    { 424, "Автор 424" },
                    { 425, "Автор 425" },
                    { 426, "Автор 426" },
                    { 427, "Автор 427" },
                    { 428, "Автор 428" },
                    { 429, "Автор 429" },
                    { 430, "Автор 430" },
                    { 431, "Автор 431" },
                    { 432, "Автор 432" },
                    { 433, "Автор 433" },
                    { 434, "Автор 434" },
                    { 435, "Автор 435" },
                    { 436, "Автор 436" },
                    { 437, "Автор 437" },
                    { 438, "Автор 438" },
                    { 439, "Автор 439" },
                    { 440, "Автор 440" },
                    { 441, "Автор 441" },
                    { 442, "Автор 442" },
                    { 443, "Автор 443" },
                    { 444, "Автор 444" },
                    { 445, "Автор 445" },
                    { 446, "Автор 446" },
                    { 447, "Автор 447" },
                    { 448, "Автор 448" },
                    { 449, "Автор 449" },
                    { 450, "Автор 450" },
                    { 451, "Автор 451" },
                    { 452, "Автор 452" },
                    { 453, "Автор 453" },
                    { 454, "Автор 454" },
                    { 455, "Автор 455" },
                    { 456, "Автор 456" },
                    { 457, "Автор 457" },
                    { 458, "Автор 458" },
                    { 459, "Автор 459" },
                    { 460, "Автор 460" },
                    { 461, "Автор 461" },
                    { 462, "Автор 462" },
                    { 463, "Автор 463" },
                    { 464, "Автор 464" },
                    { 465, "Автор 465" },
                    { 466, "Автор 466" },
                    { 467, "Автор 467" },
                    { 468, "Автор 468" },
                    { 469, "Автор 469" },
                    { 470, "Автор 470" },
                    { 471, "Автор 471" },
                    { 472, "Автор 472" },
                    { 473, "Автор 473" },
                    { 474, "Автор 474" },
                    { 475, "Автор 475" },
                    { 476, "Автор 476" },
                    { 477, "Автор 477" },
                    { 478, "Автор 478" },
                    { 479, "Автор 479" },
                    { 480, "Автор 480" },
                    { 481, "Автор 481" },
                    { 482, "Автор 482" },
                    { 483, "Автор 483" },
                    { 484, "Автор 484" },
                    { 485, "Автор 485" },
                    { 486, "Автор 486" },
                    { 487, "Автор 487" },
                    { 488, "Автор 488" },
                    { 489, "Автор 489" },
                    { 490, "Автор 490" },
                    { 491, "Автор 491" },
                    { 492, "Автор 492" },
                    { 493, "Автор 493" },
                    { 494, "Автор 494" },
                    { 495, "Автор 495" },
                    { 496, "Автор 496" },
                    { 497, "Автор 497" },
                    { 498, "Автор 498" },
                    { 499, "Автор 499" },
                    { 500, "Автор 500" }
                });

            migrationBuilder.InsertData(
                schema: "authors",
                table: "Publishers",
                columns: new[] { "Id", "Name" },
                values: new object[,]
                {
                    { 1, "Издательство ООО \"Beautiful\"" },
                    { 2, "Издательство ООО \"Summer\"" }
                });

            migrationBuilder.InsertData(
                schema: "authors",
                table: "Books",
                columns: new[] { "Id", "AuthorId", "Description", "ImageUrl", "Title" },
                values: new object[,]
                {
                    { 3, 1, "Биографическое описание жизни", "123", "Первая книга Васи" },
                    { 4, 1, "Фантастическая книга о приключениях", "123", "Вторая книга Васи" },
                    { 5, 1, "Историческая книга", "123", "Третья книга Васи" },
                    { 6, 2, "Фентази об эльфах", "123", "Первая книга Пети" },
                    { 7, 2, "Научная литература, докозательство 3-й теорему Фихтенгольца", "123", "Вторая книга Пети" },
                    { 8, 2, "Научная фантастика и приключение героя в далёком космосе", "123", "Третья книга Пети" }
                });

            migrationBuilder.InsertData(
                schema: "authors",
                table: "PublishersAuthors",
                columns: new[] { "AuthorId", "PublisherId" },
                values: new object[,]
                {
                    { 1, 1 },
                    { 1, 2 },
                    { 2, 1 }
                });

            migrationBuilder.InsertData(
                schema: "authors",
                table: "BookDetails",
                columns: new[] { "BookId", "Editor", "Genre", "HardcoverCost", "Illustrator", "Language", "PageCount", "PaperbackCost", "Rank", "ReadingAge", "Reviews", "Status", "Year" },
                values: new object[,]
                {
                    { 3, "Не известен", 4, 100m, "МИКЕЛАНДЖЕЛО", 0, 100, 0m, 7.1120000000000001, (byte)18, 0, 0, new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                    { 4, "Не известен", 0, 110m, "ЙОХАННЕС ВЕРМЕЕР", 2, 200, 0m, 4.343, (byte)12, 0, 0, new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                    { 5, "Не известен", 4, 120m, "ПАБЛО ПИКАССО", 0, 300, 0m, 9.1999999999999993, (byte)10, 0, 0, new DateTime(2002, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                    { 6, "Не известен", 1, 130m, "ВИНСЕНТ ВАН ГОГ", 2, 400, 0m, 8.3450000000000006, (byte)5, 0, 0, new DateTime(2003, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                    { 7, "Не известен", 3, 140m, "РЕМБРАНДТ ВАН РЕЙН", 1, 500, 0m, 1.0, (byte)10, 0, 0, new DateTime(2004, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                    { 8, "Не известен", 0, 150m, "ЛЕОНАРДО ДА ВИНЧИ", 2, 600, 0m, 5.0, (byte)18, 0, 0, new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Authors_Name",
                schema: "authors",
                table: "Authors",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Books_AuthorId",
                schema: "authors",
                table: "Books",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_PublishersAuthors_PublisherId",
                schema: "authors",
                table: "PublishersAuthors",
                column: "PublisherId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "BookDetails",
                schema: "authors");

            migrationBuilder.DropTable(
                name: "PublishersAuthors",
                schema: "authors");

            migrationBuilder.DropTable(
                name: "Books",
                schema: "authors");

            migrationBuilder.DropTable(
                name: "Publishers",
                schema: "authors");

            migrationBuilder.DropTable(
                name: "Authors",
                schema: "authors");
        }
    }
}
